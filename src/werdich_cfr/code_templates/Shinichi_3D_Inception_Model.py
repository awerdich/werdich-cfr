def inception_module(x,filters_1x1,filters_3x3_reduce,filters_3x3,filters_5x5_reduce,filters_5x5,filters_pool_proj,trainable=True):
    conv_1x1 = Conv3D(filters_1x1, (1,1,1), padding='same', activation='relu',kernel_initializer=kernel_init, bias_initializer=bias_init,trainable=trainable)(x)
    conv_3x3 = Conv3D(filters_3x3_reduce, (1,1,1), padding='same', activation='relu',kernel_initializer=kernel_init, bias_initializer=bias_init,trainable=trainable)(x)
    conv_1x1 = BatchNormalization(scale=False,trainable=trainable)(conv_1x1)
    conv_3x3 = BatchNormalization(scale=False,trainable=trainable)(conv_3x3)
    conv_3x3 = Conv3D(filters_3x3, (3,3,3), padding='same', activation='relu',kernel_initializer=kernel_init, bias_initializer=bias_init,trainable=trainable)(conv_3x3)
    conv_3x3 = BatchNormalization(scale=False,trainable=trainable)(conv_3x3)
    conv_5x5 = Conv3D(filters_5x5_reduce, (1,1,1), padding='same', activation='relu',kernel_initializer=kernel_init, bias_initializer=bias_init,trainable=trainable)(x)
    conv_5x5 = BatchNormalization(scale=False,trainable=trainable)(conv_5x5)
    conv_5x5 = Conv3D(filters_5x5, (3,3,3),strides=(1,1,1), padding='same', activation='relu',kernel_initializer=kernel_init, bias_initializer=bias_init,trainable=trainable)(conv_5x5)
    conv_5x5 = BatchNormalization(scale=False,trainable=trainable)(conv_5x5)
    conv_5x5 = Conv3D(filters_5x5, (3,3,3),strides=(1,1,1), padding='same', activation='relu',kernel_initializer=kernel_init, bias_initializer=bias_init,trainable=trainable)(conv_5x5)
    #conv_7x7 = BatchNormalization()(conv_5x5)
    #conv_7x7 = Conv3D(filters_5x5, (3,3,3),strides=(1,1,1), padding='same', activation='relu',kernel_initializer=kernel_init, bias_initializer=bias_init)(conv_7x7)
    pool_proj = MaxPooling3D((3,3,3), strides=(1,1,1), padding='same')(x)
    pool_proj = Conv3D(filters_pool_proj, (1,1,1), padding='same', activation='relu',kernel_initializer=kernel_init, bias_initializer=bias_init,trainable=trainable)(pool_proj)
    output = concatenate([conv_1x1, conv_3x3, conv_5x5, pool_proj], axis=4)
    return output
def get_models(Inbatchsize):
    trainable=True #False
    inputEco=Input(shape=SHAPE)
    inputScale=Input(shape=(1,))
    inputInvScale=Input(shape=(1,))
    filters=64#48
    x=inputEco
#    x=BatchNormalization()(x)
    x=Conv3D(filters,(7,7,7),padding='same',strides=(2,2,2),activation='relu',kernel_initializer=kernel_init, bias_initializer=bias_init,trainable=trainable)(x)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=MaxPooling3D(pool_size=(3,3,3),padding='same',strides=(2,2,2))(x)
    x=Conv3D(filters,(1,1,1),padding='same',strides=(1,1,1),activation='relu',kernel_initializer=kernel_init, bias_initializer=bias_init,trainable=trainable)(x)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=Conv3D(filters*3,(3,3,3),padding='same',strides=(1,1,1),activation='relu',kernel_initializer=kernel_init, bias_initializer=bias_init,trainable=trainable)(x)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=inception_module(x,filters_1x1=filters,filters_3x3_reduce=int(filters*1.5),filters_3x3=filters*4,filters_5x5_reduce=int(filters/4),filters_5x5=int(filters/2),filters_pool_proj=int(filters/2),trainable=trainable)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=inception_module(x,filters_1x1=filters*2,filters_3x3_reduce=filters*2,filters_3x3=filters*3,filters_5x5_reduce=int(filters/2),filters_5x5=filters*3,filters_pool_proj=filters,trainable=trainable)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=MaxPooling3D(pool_size=(1,3,3),padding='same',strides=(2,2,2))(x) #(1,3,3)
    x=inception_module(x,filters_1x1=filters*3,filters_3x3_reduce=int(filters*1.5),filters_3x3=int(filters*3.25),filters_5x5_reduce=int(filters/4),filters_5x5=int(filters*0.75),filters_pool_proj=filters,trainable=trainable)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=inception_module(x,filters_1x1=int(filters*2.5),filters_3x3_reduce=int(filters*1.75),filters_3x3=int(filters*3.5),filters_5x5_reduce=int(filters*0.375),filters_5x5=filters,filters_pool_proj=filters,trainable=trainable)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=inception_module(x,filters_1x1=filters*2,filters_3x3_reduce=filters*2,filters_3x3=filters*4,filters_5x5_reduce=int(filters*0.375),filters_5x5=filters,filters_pool_proj=filters,trainable=trainable)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=inception_module(x,filters_1x1=int(filters*1.75),filters_3x3_reduce=int(filters*2.25),filters_3x3=int(filters*4.5),filters_5x5_reduce=int(filters/2),filters_5x5=filters,filters_pool_proj=filters,trainable=trainable)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=inception_module(x,filters_1x1=filters*4,filters_3x3_reduce=int(filters*2.5),filters_3x3=filters*5,filters_5x5_reduce=int(filters/2),filters_5x5=filters*2,filters_pool_proj=filters*2,trainable=trainable)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=MaxPooling3D((1,3,3), strides=(2,2,2))(x) #(2,3,3) padding='same'
    x=inception_module(x,filters_1x1=filters*4,filters_3x3_reduce=int(filters*2.5),filters_3x3=filters*5,filters_5x5_reduce=int(filters/2),filters_5x5=filters*2,filters_pool_proj=filters*2,trainable=trainable)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=inception_module(x,filters_1x1=filters*6,filters_3x3_reduce=filters*3,filters_3x3=filters*6,filters_5x5_reduce=int(filters*0.75),filters_5x5=filters*2,filters_pool_proj=filters*2,trainable=trainable)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=MaxPooling3D(pool_size=(1,3,3),trainable=trainable)(x)
    x=inception_module(x,filters_1x1=filters*6,filters_3x3_reduce=filters*3,filters_3x3=filters*6,filters_5x5_reduce=int(filters*0.75),filters_5x5=filters*2,filters_pool_proj=filters*2,trainable=trainable)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    x=GlobalAveragePooling3D()(x)
    x=Dropout(0.4)(x)
    x=Dense(1,activation="relu",trainable=trainable)(x)
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    a=inputScale
    #a=Dense(256,activation='relu')(a)
    a= multiply([x,a])
    b=inputInvScale
    #b=Dense(256,activation='relu')(b)
    b=multiply([x,b])
    x=concatenate([x,a,b])
    x=BatchNormalization(scale=False,trainable=trainable)(x)
    #x=Dense(768,activation="relu")(x)
    #xa=BatchNormalization(scale=False)(x)
    #xa=Dropout(0.2)(xa)
    xa=Dense(1,name="reg")(x)
    model=Model([inputEco,inputScale,inputInvScale],xa)
    return model